DistributedDataParallel(
  (module): NeuralNetwork(
    (encoder): Sequential(
      (0): Conv1d(1, 8, kernel_size=(3,), stride=(1,), padding=same)
      (1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (2): ReLU()
      (3): Dropout(p=0.2, inplace=False)
      (4): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv1d(8, 16, kernel_size=(3,), stride=(1,), padding=same)
      (6): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (7): ReLU()
      (8): Dropout(p=0.2, inplace=False)
      (9): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): Conv1d(16, 32, kernel_size=(3,), stride=(1,), padding=same)
      (11): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (12): ReLU()
      (13): Dropout(p=0.2, inplace=False)
      (14): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (15): Conv1d(32, 64, kernel_size=(3,), stride=(1,), padding=same)
      (16): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (17): ReLU()
      (18): Dropout(p=0.2, inplace=False)
      (19): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (20): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=same)
      (21): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (22): ReLU()
      (23): Dropout(p=0.2, inplace=False)
      (24): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (25): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=same)
      (26): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (27): ReLU()
      (28): Dropout(p=0.2, inplace=False)
      (29): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (embed_linear): Sequential(
      (0): Flatten(start_dim=1, end_dim=-1)
      (1): Linear(in_features=1280, out_features=2, bias=True)
    )
    (decode_linear): Sequential(
      (0): Linear(in_features=2, out_features=1280, bias=True)
      (1): ReLU()
    )
    (decoder): Sequential(
      (0): Upsample(scale_factor=2.0, mode='nearest')
      (1): ConvTranspose1d(256, 128, kernel_size=(3,), stride=(1,), padding=(2,))
      (2): ReLU()
      (3): Dropout(p=0.2, inplace=False)
      (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Upsample(scale_factor=2.0, mode='nearest')
      (6): ConvTranspose1d(128, 64, kernel_size=(3,), stride=(1,), padding=(1,))
      (7): ReLU()
      (8): Dropout(p=0.2, inplace=False)
      (9): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): Upsample(scale_factor=2.0, mode='nearest')
      (11): ConvTranspose1d(64, 32, kernel_size=(3,), stride=(1,), padding=(2,))
      (12): ReLU()
      (13): Dropout(p=0.2, inplace=False)
      (14): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (15): Upsample(scale_factor=2.0, mode='nearest')
      (16): ConvTranspose1d(32, 16, kernel_size=(3,), stride=(1,), padding=(1,))
      (17): ReLU()
      (18): Dropout(p=0.2, inplace=False)
      (19): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (20): Upsample(scale_factor=2.0, mode='nearest')
      (21): ConvTranspose1d(16, 8, kernel_size=(3,), stride=(1,), padding=(2,))
      (22): ReLU()
      (23): Dropout(p=0.2, inplace=False)
      (24): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (25): Upsample(scale_factor=2.0, mode='nearest')
      (26): Conv1d(8, 1, kernel_size=(3,), stride=(1,), padding=same)
    )
  )
)